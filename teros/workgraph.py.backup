"""
PS-TEROS Core WorkGraph

This module contains the core workflow for PS-TEROS calculations.
One main WorkGraph with individual tasks running in parallel.
"""

from aiida import orm
from aiida.plugins import WorkflowFactory
from aiida_workgraph import task, WorkGraph
from ase.io import read
from typing import Annotated, Union, Any
from aiida_workgraph import spec
from ase import Atoms
from teros.modules.hf import calculate_formation_enthalpy
from teros.modules.slabs import get_slabs


# NOTE: Slab relaxations use two-pass approach for parallel execution
# All VASP tasks created first (independent) = parallel execution

@task
def load_structure(filepath: str):
    """
    Load structure from a file using ASE.

    Args:
        filepath: Path to structure file

    Returns:
        StructureData node
    """
    atoms = read(filepath)
    return orm.StructureData(ase=atoms)

@task
def extract_total_energy(energies: Union[orm.Dict, dict]):
    """
    Extract total energy from VASP energies output.

    Args:
        energies: Dictionary containing energy outputs from VASP (from misc output)

    Returns:
        Total energy as Float
    """
    # Handle both orm.Dict and plain dict
    if isinstance(energies, orm.Dict):
        energy_dict = energies.get_dict()
    else:
        energy_dict = energies

    # For VASP v2 workchain, energies are nested under 'total_energies'
    if 'total_energies' in energy_dict:
        energy_dict = energy_dict['total_energies']

    # Try different keys in order of preference
    for key in ['energy_extrapolated', 'energy_no_entropy', 'energy']:
        if key in energy_dict:
            return orm.Float(energy_dict[key])

    raise ValueError(f"Could not find energy in energies dict. Available keys: {list(energy_dict.keys())}")

# NOTE: Using two-pass approach for slab relaxations within @task.graph
# All VASP tasks are created first (no dependencies), ensuring parallel execution


@task.graph(outputs=[
    'bulk_energy', 'metal_energy', 'nonmetal_energy', 'oxygen_energy',
    'bulk_structure', 'metal_structure', 'nonmetal_structure', 'oxygen_structure',
    'formation_enthalpy', 'slab_structures', 'relaxed_slabs', 'slab_energies'
])
def core_workgraph(
    structures_dir: str,
    bulk_name: str,
    metal_name: str,
    nonmetal_name: str,
    oxygen_name: str,
    code_label: str,
    potential_family: str,
    bulk_potential_mapping: dict,
    metal_potential_mapping: dict,
    nonmetal_potential_mapping: dict,
    oxygen_potential_mapping: dict,
    kpoints_spacing: float,
    bulk_parameters: dict,
    bulk_options: dict,
    metal_parameters: dict,
    metal_options: dict,
    nonmetal_parameters: dict,
    nonmetal_options: dict,
    oxygen_parameters: dict,
    oxygen_options: dict,
    clean_workdir: bool,
    miller_indices: list,
    min_slab_thickness: float,
    min_vacuum_thickness: float,
    slab_parameters: dict = None,
    slab_options: dict = None,
    slab_potential_mapping: dict = None,
    slab_kpoints_spacing: float = None,
    lll_reduce: bool = False,
    center_slab: bool = True,
    symmetrize: bool = False,
    primitive: bool = True,
    in_unit_planes: bool = False,
    max_normal_search: int = None,
    relax_slabs: bool = False,
):
    """
    Core WorkGraph for formation enthalpy calculations of ternary oxides with slab generation.

    This workflow relaxes the bulk compound and all reference elements in parallel,
    then calculates the formation enthalpy and generates slab structures from the relaxed bulk.
    The workflow is general and works for any ternary oxide system (e.g., Ag3PO4, Fe2WO6, etc.).
    Each reference (metal, nonmetal, oxygen) can have its own specific calculation parameters.

    Args:
        structures_dir: Directory containing all structure files
        bulk_name: Filename of bulk structure (e.g., 'ag3po4.cif')
        metal_name: Filename of metal reference structure (e.g., 'Ag.cif')
        nonmetal_name: Filename of nonmetal reference structure (e.g., 'P.cif')
        oxygen_name: Filename of oxygen reference structure (e.g., 'O2.cif')
        code_label: Label of the VASP code in AiiDA
        potential_family: Name of the potential family
        bulk_potential_mapping: Mapping for bulk (e.g., {'Ag': 'Ag', 'P': 'P', 'O': 'O'})
        metal_potential_mapping: Mapping for metal (e.g., {'Ag': 'Ag'})
        nonmetal_potential_mapping: Mapping for nonmetal (e.g., {'P': 'P'})
        oxygen_potential_mapping: Mapping for oxygen (e.g., {'O': 'O'})
        kpoints_spacing: K-points spacing in A^-1 * 2pi
        bulk_parameters: VASP parameters for bulk
        bulk_options: Scheduler options for bulk
        metal_parameters: VASP parameters for metal reference
        metal_options: Scheduler options for metal reference
        nonmetal_parameters: VASP parameters for nonmetal reference
        nonmetal_options: Scheduler options for nonmetal reference
        oxygen_parameters: VASP parameters for oxygen reference
        oxygen_options: Scheduler options for oxygen reference
        clean_workdir: Whether to clean work directory
        miller_indices: Miller indices for slab generation (e.g., [1, 0, 0])
        min_slab_thickness: Minimum slab thickness in Angstroms
        min_vacuum_thickness: Minimum vacuum thickness in Angstroms
        slab_parameters: VASP parameters for slab relaxation. Default: None (uses bulk_parameters)
        slab_options: Scheduler options for slab calculations. Default: None (uses bulk_options)
        slab_potential_mapping: Potential mapping for slabs. Default: None (uses bulk_potential_mapping)
        slab_kpoints_spacing: K-points spacing for slabs. Default: None (uses kpoints_spacing)
        lll_reduce: Reduce cell using LLL algorithm. Default: False
        center_slab: Center the slab in c direction. Default: True
        symmetrize: Generate symmetrically distinct terminations. Default: False
        primitive: Find primitive cell before slab generation. Default: True
        in_unit_planes: Restrict Miller indices to unit planes. Default: False
        max_normal_search: Max normal search for Miller indices. Default: None
        relax_slabs: Whether to relax the generated slabs with VASP. Default: False

    Returns:
        Dictionary with energies, structures, formation enthalpy, and slab structures:
            - bulk_energy, metal_energy, nonmetal_energy, oxygen_energy: Total energies (Float)
            - bulk_structure, metal_structure, nonmetal_structure, oxygen_structure: Relaxed structures (StructureData)
            - formation_enthalpy: Formation enthalpy and related data (Dict)
            - slab_structures: Dynamic namespace with all generated slab terminations (StructureData)
            - relaxed_slabs: Dynamic namespace with relaxed slab structures (if relax_slabs=True)
            - slab_energies: Dynamic namespace with slab energies (if relax_slabs=True)
    """
    # Load the code
    code = orm.load_code(code_label)

    # Get VASP workchain and wrap it as a task
    VaspWorkChain = WorkflowFactory('vasp.v2.vasp')
    VaspTask = task(VaspWorkChain)

    # ===== BULK RELAXATION =====
    bulk_struct = load_structure(filepath=f"{structures_dir}/{bulk_name}")

    bulk_vasp = VaspTask(
        structure=bulk_struct.result,
        code=code,
        parameters={'incar': bulk_parameters},
        options=bulk_options,
        kpoints_spacing=kpoints_spacing,
        potential_family=potential_family,
        potential_mapping=bulk_potential_mapping,
        clean_workdir=clean_workdir,
    )

    bulk_energy = extract_total_energy(energies=bulk_vasp.misc)

    # ===== METAL RELAXATION =====
    metal_struct = load_structure(filepath=f"{structures_dir}/{metal_name}")

    metal_vasp = VaspTask(
        structure=metal_struct.result,
        code=code,
        parameters={'incar': metal_parameters},
        options=metal_options,
        kpoints_spacing=kpoints_spacing,
        potential_family=potential_family,
        potential_mapping=metal_potential_mapping,
        clean_workdir=clean_workdir,
    )

    metal_energy = extract_total_energy(energies=metal_vasp.misc)

    # ===== NONMETAL RELAXATION =====
    nonmetal_struct = load_structure(filepath=f"{structures_dir}/{nonmetal_name}")

    nonmetal_vasp = VaspTask(
        structure=nonmetal_struct.result,
        code=code,
        parameters={'incar': nonmetal_parameters},
        options=nonmetal_options,
        kpoints_spacing=kpoints_spacing,
        potential_family=potential_family,
        potential_mapping=nonmetal_potential_mapping,
        clean_workdir=clean_workdir,
    )

    nonmetal_energy = extract_total_energy(energies=nonmetal_vasp.misc)

    # ===== OXYGEN RELAXATION =====
    oxygen_struct = load_structure(filepath=f"{structures_dir}/{oxygen_name}")

    oxygen_vasp = VaspTask(
        structure=oxygen_struct.result,
        code=code,
        parameters={'incar': oxygen_parameters},
        options=oxygen_options,
        kpoints_spacing=kpoints_spacing,
        potential_family=potential_family,
        potential_mapping=oxygen_potential_mapping,
        clean_workdir=clean_workdir,
    )

    oxygen_energy = extract_total_energy(energies=oxygen_vasp.misc)

    # ===== FORMATION ENTHALPY CALCULATION =====
    formation_hf = calculate_formation_enthalpy(
        bulk_structure=bulk_vasp.structure,
        bulk_energy=bulk_energy.result,
        metal_structure=metal_vasp.structure,
        metal_energy=metal_energy.result,
        nonmetal_structure=nonmetal_vasp.structure,
        nonmetal_energy=nonmetal_energy.result,
        oxygen_structure=oxygen_vasp.structure,
        oxygen_energy=oxygen_energy.result,
    )

    # ===== SLAB GENERATION =====
    slabs = get_slabs(
        relaxed_structure=bulk_vasp.structure,
        miller_indices=miller_indices,
        min_slab_thickness=min_slab_thickness,
        min_vacuum_thickness=min_vacuum_thickness,
        lll_reduce=lll_reduce,
        center_slab=center_slab,
        symmetrize=symmetrize,
        primitive=primitive,
        in_unit_planes=in_unit_planes,
        max_normal_search=max_normal_search,
    )

    # ===== SLAB RELAXATION (OPTIONAL) =====
    relaxed_slabs_output = None
    slab_energies_output = None

    if relax_slabs:
        # Use slab-specific parameters or fall back to bulk parameters
        slab_params = slab_parameters if slab_parameters is not None else bulk_parameters
        slab_opts = slab_options if slab_options is not None else bulk_options
        slab_pot_map = slab_potential_mapping if slab_potential_mapping is not None else bulk_potential_mapping
        slab_kpts = slab_kpoints_spacing if slab_kpoints_spacing is not None else kpoints_spacing

        # Two-pass approach for parallel slab relaxations
        # Pass 1: Create all VASP tasks (no dependencies between them)
        # Pass 2: Extract energies from all tasks
        relaxed_slabs = {}
        slab_energies_dict = {}
        vasp_tasks = {}

        # Extract slabs from dynamic namespace
        if hasattr(slabs.slabs, "_get_keys"):
            slab_items = [(key, getattr(slabs.slabs, key)) for key in slabs.slabs._get_keys()]
        else:
            slab_items = list(slabs.slabs.items()) if isinstance(slabs.slabs, dict) else []

        # PASS 1: Create all VASP tasks
        # Since they're all independent, they run in parallel
        for slab_id, slab_structure in slab_items:
            vasp_tasks[slab_id] = VaspTask(
                structure=slab_structure,
                code=code,
                parameters={'incar': slab_params},
                options=slab_opts,
                kpoints_spacing=slab_kpts,
                potential_family=potential_family,
                potential_mapping=slab_pot_map,
                clean_workdir=clean_workdir,
            )

        # PASS 2: Extract energies and collect results
        for slab_id in vasp_tasks:
            vasp_task = vasp_tasks[slab_id]
            energy = extract_total_energy(energies=vasp_task.misc)

            relaxed_slabs[slab_id] = vasp_task.structure
            slab_energies_dict[slab_id] = energy.result

        relaxed_slabs_output = relaxed_slabs
        slab_energies_output = slab_energies_dict

    # Return all outputs
    return {
        'bulk_energy': bulk_energy.result,
        'bulk_structure': bulk_vasp.structure,
        'metal_energy': metal_energy.result,
        'metal_structure': metal_vasp.structure,
        'nonmetal_energy': nonmetal_energy.result,
        'nonmetal_structure': nonmetal_vasp.structure,
        'oxygen_energy': oxygen_energy.result,
        'oxygen_structure': oxygen_vasp.structure,
        'formation_enthalpy': formation_hf.result,
        'slab_structures': slabs.slabs,
        'relaxed_slabs': relaxed_slabs_output,
        'slab_energies': slab_energies_output,
    }


def build_core_workgraph(
    structures_dir: str,
    bulk_name: str,
    metal_name: str,
    nonmetal_name: str,
    oxygen_name: str,
    miller_indices: list,
    min_slab_thickness: float,
    min_vacuum_thickness: float,
    code_label: str = 'VASP-VTST-6.4.3@bohr',
    potential_family: str = 'PBE',
    bulk_potential_mapping: dict = None,
    metal_potential_mapping: dict = None,
    nonmetal_potential_mapping: dict = None,
    oxygen_potential_mapping: dict = None,
    kpoints_spacing: float = 0.3,
    bulk_parameters: dict = None,
    bulk_options: dict = None,
    metal_parameters: dict = None,
    metal_options: dict = None,
    nonmetal_parameters: dict = None,
    nonmetal_options: dict = None,
    oxygen_parameters: dict = None,
    oxygen_options: dict = None,
    clean_workdir: bool = True,
    slab_parameters: dict = None,
    slab_options: dict = None,
    slab_potential_mapping: dict = None,
    slab_kpoints_spacing: float = None,
    lll_reduce: bool = False,
    center_slab: bool = True,
    symmetrize: bool = False,
    primitive: bool = True,
    in_unit_planes: bool = False,
    max_normal_search: int = None,
    relax_slabs: bool = False,
    name: str = 'FormationEnthalpy',
):
    """
    Build a formation enthalpy WorkGraph for any ternary oxide with slab generation and optional relaxation.

    This is a convenience wrapper that builds and returns a WorkGraph
    ready to calculate formation enthalpy, generate slab structures, and optionally relax them.

    Args:
        relax_slabs: Whether to relax generated slabs with VASP. Default: False
        slab_parameters: VASP parameters for slab relaxation. Default: None (uses bulk_parameters)
        slab_options: Scheduler options for slab calculations. Default: None (uses bulk_options)
        slab_potential_mapping: Potential mapping for slabs. Default: None (uses bulk_potential_mapping)
        slab_kpoints_spacing: K-points spacing for slabs. Default: None (uses kpoints_spacing)
        ... (other parameters as before)

    Returns:
        WorkGraph instance ready to be submitted
    """
    # Build the workgraph
    # Note: parameters will be wrapped with {'incar': ...} inside the graph
    wg = core_workgraph.build(
        structures_dir=structures_dir,
        bulk_name=bulk_name,
        metal_name=metal_name,
        nonmetal_name=nonmetal_name,
        oxygen_name=oxygen_name,
        code_label=code_label,
        potential_family=potential_family,
        bulk_potential_mapping=bulk_potential_mapping or {},
        metal_potential_mapping=metal_potential_mapping or {},
        nonmetal_potential_mapping=nonmetal_potential_mapping or {},
        oxygen_potential_mapping=oxygen_potential_mapping or {},
        kpoints_spacing=kpoints_spacing,
        bulk_parameters=bulk_parameters or {},
        bulk_options=bulk_options or {},
        metal_parameters=metal_parameters or {},
        metal_options=metal_options or {},
        nonmetal_parameters=nonmetal_parameters or {},
        nonmetal_options=nonmetal_options or {},
        oxygen_parameters=oxygen_parameters or {},
        oxygen_options=oxygen_options or {},
        clean_workdir=clean_workdir,
        miller_indices=miller_indices,
        min_slab_thickness=min_slab_thickness,
        min_vacuum_thickness=min_vacuum_thickness,
        slab_parameters=slab_parameters,
        slab_options=slab_options,
        slab_potential_mapping=slab_potential_mapping,
        slab_kpoints_spacing=slab_kpoints_spacing,
        lll_reduce=lll_reduce,
        center_slab=center_slab,
        symmetrize=symmetrize,
        primitive=primitive,
        in_unit_planes=in_unit_planes,
        max_normal_search=max_normal_search,
        relax_slabs=relax_slabs,
    )

    # Set the name
    wg.name = name

    return wg


if __name__ == '__main__':
    """
    Simple test/example of the WorkGraph.
    For full examples, see examples/formation/
    """
    print("PS-TEROS Core WorkGraph Module")
    print("=" * 50)
    print("\nThis creates a WorkGraph using @task.graph decorator:")
    print("  - load_structure tasks (using @task)")
    print("  - VASP relaxation tasks (run in parallel)")
    print("  - extract_total_energy tasks (using @task)")
    print("\nFor examples, see:")
    print("  - examples/formation/formation.py (formation enthalpy)")
